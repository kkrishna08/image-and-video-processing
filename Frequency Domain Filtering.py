# -*- coding: utf-8 -*-
"""Welcome to Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

image_path = "/content/sample_data/images_11.jpeg"
img = cv2.imread(image_path, 0)
# Display the loaded image
cv2_imshow(img)

def apply_dft(image):
    """Applies Discrete Fourier Transform (DFT) to an image."""
    # Convert image to float32 for DFT
    image_float32 = np.float32(image)
    dft = cv2.dft(image_float32, flags=cv2.DFT_COMPLEX_OUTPUT)
    dft_shift = np.fft.fftshift(dft)
    return dft_shift

def apply_idft(dft_shift):
    """Performs Inverse DFT to get the spatial domain image."""
    f_ishift = np.fft.ifftshift(dft_shift)
    img_back = cv2.idft(f_ishift)
    img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])
    return img_back

def create_filter(shape, filter_type, d0, n=2, highpass=False):
    """Creates Ideal, Butterworth, or Gaussian filter."""
    rows, cols = shape
    crow, ccol = rows // 2, cols // 2
    # Create meshgrid with row and column distances
    u, v = np.meshgrid(np.arange(cols) - ccol, np.arange(rows) - crow)
    # Small constant to avoid division by zero
    epsilon = 1e-6
    # Calculate the distance matrix
    d = np.sqrt(u**2 + v**2) + epsilon
    if filter_type == 'ideal':
        if highpass:
            filter_mask = np.float32(d > d0)
        else:
            filter_mask = np.float32(d <= d0)
    elif filter_type == 'butterworth':
        if highpass:
            filter_mask = 1 / (1 + (d0 / d)**(2 * n))
        else:
            filter_mask = 1 / (1 + (d / d0)**(2 * n))
    elif filter_type == 'gaussian':
        if highpass:
            filter_mask = 1 - np.exp(-(d**2) / (2 * (d0**2)))
        else:
            filter_mask = np.exp(-(d**2) / (2 * (d0**2)))
    return filter_mask

def apply_filter(dft_shift, filter_mask):
    """Applies the filter to the DFT of an image."""
    filter_mask = np.stack([filter_mask, filter_mask], axis=-1)
    dft_filtered = dft_shift * filter_mask
    return dft_filtered

def filter_image(image, filter_type, d0, n=2, highpass=False):
    """Filters the image using the specified filter and returns the filtered image."""
    dft_shift = apply_dft(image)
    filter_mask = create_filter(image.shape, filter_type, d0, n, highpass)
    dft_filtered = apply_filter(dft_shift, filter_mask)
    img_filtered = apply_idft(dft_filtered)
    return img_filtered, filter_mask

def display_results(original, filtered_images, filter_masks, titles):
    """Displays original and filtered images."""
    plt.figure(figsize=(15, 15))  # Adjusting size to fit more plots
    plt.subplot(5, 3, 1), plt.imshow(original, cmap='gray')
    plt.title('Original Image'), plt.axis('off')
    for i in range(6):
        plt.subplot(5, 3, i + 2), plt.imshow(np.log(1 + np.abs(filter_masks[i])), cmap='gray')
        plt.title(f'{titles[i]} Mask'), plt.axis('off')
    for i in range(6):
        plt.subplot(5, 3, i + 8), plt.imshow(filtered_images[i], cmap='gray')
        plt.title(f'{titles[i]} Filtered'), plt.axis('off')
    plt.tight_layout()
    plt.show()

# Set filter parameters
d0 = 30    # Cutoff frequency
n = 2      # Order for Butterworth

# Apply low-pass filters
ideal_low, ideal_low_mask = filter_image(img, 'ideal', d0)
butterworth_low, butterworth_low_mask = filter_image(img, 'butterworth', d0, n)
gaussian_low, gaussian_low_mask = filter_image(img, 'gaussian', d0)

# Apply high-pass filters
ideal_high, ideal_high_mask = filter_image(img, 'ideal', d0, highpass=True)
butterworth_high, butterworth_high_mask = filter_image(img, 'butterworth', d0, n, highpass=True)
gaussian_high, gaussian_high_mask = filter_image(img, 'gaussian', d0, highpass=True)

# Display results
filtered_images = [ideal_low, butterworth_low, gaussian_low, ideal_high, butterworth_high, gaussian_high]
filter_masks = [ideal_low_mask, butterworth_low_mask, gaussian_low_mask, ideal_high_mask, butterworth_high_mask, gaussian_high_mask]
titles = ['Ideal Low-pass', 'Butterworth Low-pass', 'Gaussian Low-pass', 'Ideal High-pass', 'Butterworth High-pass', 'Gaussian High-pass']
display_results(img, filtered_images, filter_masks, titles)